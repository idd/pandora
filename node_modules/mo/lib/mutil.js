var util = require('util'),
    TYPES = {
        'undefined': 'undefined',
        'number': 'number',
        'boolean': 'boolean',
        'string': 'string',
        '[object Function]': 'function',
        '[object RegExp]': 'regex',
        '[object Array]': 'array',
        '[object Date]': 'date',
        '[object Error]': 'error'
    },
    ObjectCreate = Object.create,
    _apply = function(p, r, s, ov) {
        if (ov || !(p in r)) {
            r[p] = s[p];
        }
    },
    getType = function (o) {
        return TYPES[typeof o] || TYPES[Object.prototype.toString.call(o)] || (o ? 'object': 'NULL');
    },
    mutil;


mutil = {
    create: function(proto, c) {
        var newPrototype;
        if (ObjectCreate) {
            newPrototype = ObjectCreate(proto);
        } else {
            emptyFn.prototype = proto;
            newPrototype = new emptyFn();
        }
        newPrototype.constructor = c;
        return newPrototype;
    },
    mix: function(r, s, ov, wl) {
        if (!s || !r) return r;
        if (ov === undefined) ov = true;
        var i = 0,
            p, len;

        if (wl && (len = wl.length)) {
            for (; i < len; i++) {
                p = wl[i];
                if (p in s) {
                    _apply(p, r, s, ov);
                }
            }
        } else {
            for (p in s) {
                _apply(p, r, s, ov);
            }
        }
        return r;
    },
    /**
     *将第二个对象合并到一个新的对象上,并返回
     *@param {object} arguments 将所有参数合并
     *@return {object} 返回merge后的新对象
     */
    merge: function() {
        var a = arguments,
            o = {}, i, l = a.length;

        for (i = 0; i < l; i = i + 1) {
            a[i] = (typeof a[i] === 'object') ? a[i] : {};
            mutil.mix(o, a[i], true);
        }

        return o;
    },
    /**
     *@param {string} r
     *@param {string} s
     *@param {string} px prototype属性
     *@param {string} sx 要增加的新属性
     *@return 返回新对象或方法
     */
    extend: function(r, s, px, sx) {
        if (!s || !r) return r;
        var sp = s.prototype,
            rp;


        // add prototype chain
        if (typeof s === 'boolean') {
            rp = mutil.create(sp, r);
            r.prototype = mutil.mix(rp, r.prototype);
            //chain r's constrator
            r.superclass = mutil.create(sp, s);
        }
        if (typeof s === 'object') {
            mutil.mix(r.prototype || r, s);
        }
        //新增原型属性
        if (px) {
            mutil.mix(rp, px);
        }
        //新加入属性
        if (sx) {
            mutil.mix(r, sx);
        }

        return r;
    }
};



mutil.extend(mutil, {
    isFunction: function(o) {
        return getType(o) === 'function';
    },
    isUndefined: function(o) {
        return typeof o === 'undefined';
    },
    isNumber: function(o) {
        return typeof o === 'number' && isFinite(o);
    },
    isNull: function(o) {
        return o === null;
    },
    isString: function(o) {
        return typeof o === 'string';
    },
    each: function(o, handle, ctx) {
        var length, i;
        if (!o || !getType(handle) === 'boolean') {
            return;
        }
        if (util.isArray(o) || (o.length && o[0])) {
            for (i = 0, length = o.length; i < length; i++) {
                if (handle.call(ctx || o[i], o[i], i) === false) {
                    break;
                }
            }

        } else {
            for (i in o) {
                if (handle.call(ctx || o[i], o[i], i) === false) {
                    break;
                }
            }
        }
    },
    setObjValue: function(o, path, val) {
        // var i,
        //     p = Y.Array(path),
        //     leafIdx = p.length - 1,
        //     ref = o;

        // if (leafIdx >= 0) {
        //     for (i = 0; ref !== UNDEFINED && i < leafIdx; i++) {
        //         ref = ref[p[i]];
        //     }

        //     if (ref !== UNDEFINED) {
        //         ref[p[i]] = val;
        //     } else {
        //         return UNDEFINED;
        //     }
        // }

        // return o;
    },
    formatTime: function(date, format) {
        format = format || 'yyyy-mm-dd';
        return format.replace(/y+/i, date.getFullYear())
            .replace(/m+/, ((date.getMonth() + 1) < 10 ? "0" : "") + (date.getMonth() + 1))
            .replace(/d+/, (date.getDate() < 10 ? "0" : "") + date.getDate())
            .replace(/H+/, (date.getHours() < 10 ? "0" : "") + date.getHours())
            .replace(/M+/, (date.getMinutes() < 10 ? "0" : "") + date.getMinutes())
            .replace(/S+/, (date.getSeconds() < 10 ? "0" : "") + date.getSeconds());
    },
    getObjValue: function(o, path) {
        if (!L.isObject(o)) {
            return undefined;
        }

        var i,
            p = path.split('.'),
            l = p.length;

        for (i = 0; o !== 'undefined' && i < l; i++) {
            o = o[p[i]];
        }

        return o;
    },
    guid: function(pre) {
        var id = 'mutil_' + (++guid);
        return (pre) ? (pre + id) : id;
    },
    /**
     *
     */
    stamp: function(o, readOnly, id) {
        var uid;
        if (!o) return o;
        if (!uid) {
            uid = mutil.guid();
            if (!readOnly) {
                try {
                    o[id || 'id'] = uid;
                } catch (e) {
                    uid = null;
                }
            }
        }
        return uid;
    }
});


module.exports = mutil.extend(mutil, require('util'));