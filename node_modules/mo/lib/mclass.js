var mclass = {
    base:{
        _data:{},
        _attrs:{
        },
        set:function(name, val, isClone){
            var d = this.data;
            if(isClone === true){
                val = L.clone(val);
            }
            if(!(d && d[name])){
                d[name] = {};
            }

            if (d && name in d && d[name].readOnly == true) return this;

            if(d[name]['setter']){
                val = d[name]['setter'].call(this, val);
            }

            d[name]['value'] = val;
            return this;
        },
        get:function(name){
            var d = this._data;
            return (d && name in d) ?(d[name]['getter'] ? d[name]['getter'].apply(this) :d[name]['value'] ) : undefined;
        }
    },
    create:function(proto){
        var mutil = require('mo').util,
            ret = function(){
                if(this.init){
                    this.init.apply(this, arguments);
                }
                return this;
            };
        if(proto && proto.attrs){
            proto._ = proto.attrs;
            proto.attrs = undefined;
        }
        mutil.extend(ret, mclass.base);
        proto && mutil.extend(ret, proto);
        return ret;
    }
}
module.exports = mclass;